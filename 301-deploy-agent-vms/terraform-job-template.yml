parameters:
  environment: agents
  TerraformArguments: ''
  TerraformEnvVariables:

jobs:

- job: Terraform
  displayName: Terraform
  # Avoid concurrent Terraform runs on PRs, which would result in failures due to exclusive lock on remote state file.
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), variables['RUN_FLAG_TERRAFORM']))
  pool:
    vmImage: ubuntu-latest
  steps:

  - template: ../infrastructure/terraform-init-template.yml
    parameters:
      provisionStorage: true
      TerraformDirectory: 301-deploy-agent-vms/terraform
      environment: ${{ parameters.environment }}

  # Using bash instead of Terraform extension because of following issues:
  # - https://github.com/microsoft/azure-pipelines-extensions/issues/748
  # - https://github.com/microsoft/azure-pipelines-extensions/issues/725
  # - https://github.com/microsoft/azure-pipelines-extensions/issues/747
  - bash: |
      set -eu
      export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
      terraform apply -input=false -auto-approve -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}
    displayName: Terraform apply
    workingDirectory: 301-deploy-agent-vms/terraform
    env:
      ${{ parameters.TerraformEnvVariables }}

- job: ReadTerraform
  displayName: Use Terraform outputs
  dependsOn: Terraform
  condition: always()
  steps:

  - template: ../infrastructure/terraform-init-template.yml
    parameters:
      TerraformDirectory: 301-deploy-agent-vms/terraform
      environment: ${{ parameters.environment }}

  - template: ../infrastructure/terraform-outputs-template.yml
    parameters:
      TerraformDirectory: 301-deploy-agent-vms/terraform

- job: DummySampleJob
  displayName: Use Terraform outputs
  dependsOn: ReadTerraform
  variables:
    pool_name: $[ dependencies.ReadTerraform.outputs['Outputs.pool_name'] ]
  pool: $(pool_name)
  steps:
  - bash: |
      echo This is running on agent
      hostname
    displayName: Sample script
