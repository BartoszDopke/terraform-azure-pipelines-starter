parameters:
  environment: stage
  environmentDisplayName: Staging
  TerraformVersion: 0.12.18
  TerraformArguments: ''
  TerraformEnvVariables:
  TerraformBackendServiceConnection: Terraform
  TerraformEnvironmentServiceConnection: Terraform
  TerraformBackendResourceGroup: terraform
  TerraformBackendStorageAccount: terraformstarterstate
  TerraformBackendStorageContainer: terraformstate
  TerraformBackendLocation: North Europe

stages:
- stage: 'Terraform_Plan_${{ parameters.environment }}'
  displayName: 'Plan ${{ parameters.environmentDisplayName }}'
  jobs:
  - job: "Terraform_Plan"
    displayName: Terraform Plan
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: AzureCLI@1
      displayName: Set up Terraform backend
      # Avoid concurrent Terraform runs on PRs, which would result in failures due to exclusive lock on remote state file.
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), variables['RUN_FLAG_TERRAFORM']))
      inputs:
        azureSubscription: ${{ parameters.TerraformBackendServiceConnection }}
        scriptLocation: inlineScript
        inlineScript: |
          set -eu  # fail on error
          export AZURE_STORAGE_ACCOUNT='${{ parameters.TerraformBackendStorageAccount }}'
          container='${{ parameters.TerraformBackendStorageContainer }}'
          if ! az storage container exists -n "$container" -o none; then
            az configure --defaults group='${{ parameters.TerraformBackendResourceGroup }}' location='${{ parameters.TerraformBackendLocation }}'
            az group create -n '${{ parameters.TerraformBackendResourceGroup }}' -o none
            az storage account create -n "$AZURE_STORAGE_ACCOUNT" -o none
            az storage container create -n "$container" -o none
          fi
          blob='${{ parameters.environment }}.tfstate'
          if [[ $(az storage blob exists -c "$container" -n "$blob" --query exists) = "true" ]]; then
            if [[ $(az storage blob show -c "$container" -n "$blob" --query "properties.lease.status=='locked'") = "true" ]]; then
              echo "State is leased"
              lock_jwt=$(az storage blob show -c "$container" -n "$blob" --query metadata.terraformlockid -o tsv)
              if [ "$lock_jwt" != "" ]; then
                lock_json=$(base64 -d <<< "$lock_jwt")
                echo "State is locked"
                jq . <<< "$lock_json"
              fi
              if [ "${TERRAFORM_BREAK_LEASE:-}" != "" ]; then
                az storage blob lease break -c "$container" -b "$blob"
              else
                echo "If you're really sure you want to break the lease, rerun the pipeline with variable TERRAFORM_BREAK_LEASE set to 1."
                exit 1
              fi
            fi
          fi
        addSpnToEnvironment: true

    - bash: |
        cp infrastructure/terraform_backend/* infrastructure/terraform
      displayName: Copy terraform backend config to terraform directory
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - template: terraform-init-template.yml
      parameters:
        TerraformVersion: ${{ parameters.TerraformVersion }}
        TerraformBackendServiceConnection: ${{ parameters.TerraformBackendServiceConnection }}
        TerraformEnvironmentServiceConnection: ${{ parameters.TerraformEnvironmentServiceConnection }}
        TerraformBackendResourceGroup: ${{ parameters.TerraformBackendResourceGroup }}
        TerraformBackendStorageAccount: ${{ parameters.TerraformBackendStorageAccount }}
        TerraformBackendStorageContainer: ${{ parameters.TerraformBackendStorageContainer }}
        environment: ${{ parameters.environment }}

    # Using AzureCLI instead of Terraform extension because of following issues:
    # - https://github.com/microsoft/azure-pipelines-extensions/issues/748
    # - https://github.com/microsoft/azure-pipelines-extensions/issues/725
    # - https://github.com/microsoft/azure-pipelines-extensions/issues/747
    - bash: |
        set -eu
        export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
        terraform plan -input=false -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}
      displayName: Terraform plan
      workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/terraform
      env:
        ${{ parameters.TerraformEnvVariables }}

    - bash: |
        # Save a human-friendly version of the plan with passwords hidden
        terraform show -no-color tfplan > plan.txt
        # Remove terraform plan from published artifacts, as it contains clear-text secrets
        rm tfplan
        # Resource providers can be > 100MB large, we don't want them in the published artifacts.
        rm -r .terraform
      displayName: Save plan text representation
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'

    - task: PublishPipelineArtifact@1
      displayName: Publish Pipeline Artifact
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/infrastructure/terraform
        artifact: terraform_resources_${{ parameters.environment }}

- stage: 'Terraform_Apply_${{ parameters.environment }}'
  displayName: Apply ${{ parameters.environmentDisplayName }}
  jobs:
  - deployment: ${{ parameters.environment }}
    environment: ${{ parameters.environmentDisplayName }}
    displayName: Terraform Apply
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            displayName: Download Pipeline Artifact
            inputs:
              artifactName: terraform_resources_${{ parameters.environment }}
              targetPath: '$(System.DefaultWorkingDirectory)/terraform_resources'

          - template: terraform-init-template.yml
            parameters:
              TerraformVersion: ${{ parameters.TerraformVersion }}
              TerraformBackendServiceConnection: ${{ parameters.TerraformBackendServiceConnection }}
              TerraformEnvironmentServiceConnection: ${{ parameters.TerraformEnvironmentServiceConnection }}
              TerraformBackendResourceGroup: ${{ parameters.TerraformBackendResourceGroup }}
              TerraformBackendStorageAccount: ${{ parameters.TerraformBackendStorageAccount }}
              TerraformBackendStorageContainer: ${{ parameters.TerraformBackendStorageContainer }}
              environment: ${{ parameters.environment }}

          # As the Terraform extension plan task doesn't support -detailed-exitcode
          # (to check if any changes are present), we define an equivalent AzureCLI
          # task instead.
          - bash: |
              set -eu
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              # terraform plan -detailed-exitcode exit codes:
              # 0 - Succeeded, diff is empty (no changes)
              # 1 - Errored
              # 2 - Succeeded, there is a diff
              # >2 - unexpected, crash or bug
              if terraform plan -detailed-exitcode -input=false -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}; then
                echo "Terraform succeeded with no changes"
              else
                terraform_exitcode=$?
                if [ $terraform_exitcode -eq 2 ]; then
                  echo "Terraform succeeded with updates"
                  echo "##vso[task.setvariable variable=TERRAFORM_UPDATES;]true"
                else
                  echo "ERROR: terraform exited with code $terraform_exitcode"
                  exit 1
                fi
              fi
            displayName: Terraform plan
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform_resources

          - bash: |
              set -eux  # ensure pipeline stops if terraform fails or diff reports a difference
              terraform show -no-color tfplan > newplan.txt
              diff -u plan.txt newplan.txt
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
            displayName: Ensure plan is unchanged

          - bash: |
              set -eu
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              terraform apply -input=false -auto-approve tfplan
            condition: and(succeeded(), variables['TERRAFORM_UPDATES'])
            displayName: Terraform apply
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform_resources
