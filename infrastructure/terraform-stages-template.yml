parameters:
  environment: Staging
  TerraformVersion: 0.12.18
  TerraformVariables: -var environment=stage
  TerraformBackendServiceConnection: Terraform
  TerraformEnvironmentServiceConnection: Terraform
  TerraformBackendResourceGroup: terraform
  TerraformBackendStorageAccount: terraformstarter
  TerraformBackendStorageContainer: terraformstate

stages:
- stage: 'Terraform_Plan_${{ parameters.environment }}'
  displayName: 'Plan ${{ parameters.environment }}'
  jobs:
  - job: "Terraform_Plan"
    displayName: "Terraform Plan"
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: ${{ parameters.TerraformVersion }}

    - bash: |
        cp infrastructure/terraform_backend/* infrastructure/terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Copy terraform backend config to terraform directory'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform init'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
        backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
        backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
        backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
        backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
        backendAzureRmKey: ${{ parameters.environment }}.tfstate

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      name: 'terraform_plan'
      displayName: 'Terraform plan'
      inputs:
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
        commandOptions: -out tfplan ${{ parameters.TerraformVariables }}
        environmentServiceNameAzureRM: '${{ parameters.TerraformEnvironmentServiceConnection }}'
        backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'

    # Resource providers can be > 100MB large, we don't want them in the published artifacts.
    - bash: |
        set -eux
        terraform show -no-color tfplan > plan.txt
        rm -r tfplan .terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
      displayName: 'Copy plan and delete derived terraform resources'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/infrastructure/terraform
        artifact: terraform_resources_${{ parameters.environment }}

- stage: 'Terraform_Apply_${{ parameters.environment }}'
  displayName: 'Apply ${{ parameters.environment }}'
  jobs:
  - deployment: ${{ parameters.environment }}
    environment: ${{ parameters.environment }}
    displayName: "Terraform Apply"
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: ${{ parameters.TerraformVersion }}

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              artifactName: terraform_resources_${{ parameters.environment }}
              targetPath: '$(System.DefaultWorkingDirectory)/terraform_resources'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
              backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
              backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
              backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
              backendAzureRmKey: ${{ parameters.environment }}.tfstate

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            name: 'terraform_plan'
            displayName: 'Terraform plan'
            inputs:
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              commandOptions: -out tfplan ${{ parameters.TerraformVariables }}
              environmentServiceNameAzureRM: '${{ parameters.TerraformEnvironmentServiceConnection }}'
              backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'

          - bash: |
              set -eux  # ensure pipeline stops if terraform fails or diff reports a difference
              terraform show -no-color tfplan > newplan.txt
              diff -u plan.txt newplan.txt
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
            displayName: 'Ensure plan is unchanged'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform apply'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              commandOptions: '-auto-approve tfplan'
              environmentServiceNameAzureRM: '${{ parameters.TerraformEnvironmentServiceConnection }}'
              backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
