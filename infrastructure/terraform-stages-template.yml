parameters:
  displayName: Staging
  environment: stage
  TerraformVersion: 0.12.17
  TerraformVariables: ''
  TerraformBackendServiceConnection: Terraform
  TerraformEnvironmentServiceConnection: Terraform
  TerraformBackendResourceGroup: terraform
  TerraformBackendStorageAccount: terraformstarterstate
  TerraformBackendStorageContainer: terraformstate
  TerraformBackendLocation: North Europe
  TerraformBackendKeyVault: terraformstarter

variables:
  SQLPassword: "Str0ng!Passw0wrd"

stages:
- stage: 'Terraform_Plan_${{ parameters.environment }}'
  displayName: 'Plan ${{ parameters.displayName }}'
  jobs:
  - job: "Terraform_Plan"
    displayName: "Terraform Plan"
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: AzureCLI@1
      inputs:
        azureSubscription: ${{ parameters.TerraformBackendServiceConnection }}
        scriptLocation: inlineScript
        inlineScript: |
          set -eux  # fail on error
          time az configure --defaults group='${{ parameters.TerraformBackendResourceGroup }}' location='${{ parameters.TerraformBackendLocation }}'
          time az group create -n '${{ parameters.TerraformBackendResourceGroup }}' -o none
          time az storage account create  -n '${{ parameters.TerraformBackendStorageAccount }}' -o none
          time az storage container create --account-name '${{ parameters.TerraformBackendStorageAccount }}' -n '${{ parameters.TerraformBackendStorageContainer }}' -o none
          time az keyvault create -n '${{ parameters.TerraformBackendKeyVault }}' -o none
          time az keyvault set-policy -n '${{ parameters.TerraformBackendKeyVault }}' --spn "$servicePrincipalId" --secret-permissions get list -o none
          set +x  # do not echo secret
          az keyvault secret set --vault-name '${{ parameters.TerraformBackendKeyVault }}' -n "${{ parameters.environment }}-sql-password" --value "$(SQLPassword)" -o none
        addSpnToEnvironment: true
      displayName: 'Set up backend and Key Vault'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: ${{ parameters.TerraformVersion }}

    - bash: |
        cp infrastructure/terraform_backend/* infrastructure/terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Copy terraform backend config to terraform directory'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform init'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
        backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
        backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
        backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
        backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
        backendAzureRmKey: ${{ parameters.environment }}.tfstate

    # Using AzureCLI instead of Terraform extension because of https://github.com/microsoft/azure-pipelines-extensions/issues/747
    - task: AzureCLI@1
      inputs:
        azureSubscription: '${{ parameters.TerraformEnvironmentServiceConnection }}'
        scriptLocation: inlineScript
        inlineScript: |
          set -eu
          export ARM_CLIENT_ID="$servicePrincipalId"
          export ARM_CLIENT_SECRET="$servicePrincipalKey"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_TENANT_ID="$tenantId"
          terraform plan -out=tfplan  -var environment=${{ parameters.environment }} ${{ parameters.TerraformVariables }}
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
        addSpnToEnvironment: true
      displayName: 'Terraform plan'

    - bash: |
        # Save a human-friendly version of the plan with passwords hidden
        terraform show -no-color tfplan > plan.txt
        # Remove terraform plan from published artifacts, as it contains clear-text secrets
        rm tfplan
        # Resource providers can be > 100MB large, we don't want them in the published artifacts.
        rm -r .terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
      displayName: 'Save plan text representation'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/infrastructure/terraform
        artifact: terraform_resources_${{ parameters.environment }}

- stage: 'Terraform_Apply_${{ parameters.environment }}'
  displayName: 'Apply ${{ parameters.displayName }}'
  jobs:
  - deployment: ${{ parameters.environment }}
    environment: ${{ parameters.displayName }}
    displayName: "Terraform Apply"
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: ${{ parameters.TerraformVersion }}

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              artifactName: terraform_resources_${{ parameters.environment }}
              targetPath: '$(System.DefaultWorkingDirectory)/terraform_resources'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
              backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
              backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
              backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
              backendAzureRmKey: ${{ parameters.environment }}.tfstate

          - task: AzureCLI@1
            inputs:
              azureSubscription: '${{ parameters.TerraformEnvironmentServiceConnection }}'
              scriptLocation: inlineScript
              inlineScript: |
                set -eu
                export ARM_CLIENT_ID="$servicePrincipalId"
                export ARM_CLIENT_SECRET="$servicePrincipalKey"
                export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                export ARM_TENANT_ID="$tenantId"
                terraform plan -out=tfplan  -var environment=${{ parameters.environment }} ${{ parameters.TerraformVariables }}
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              addSpnToEnvironment: true
            displayName: 'Terraform plan'

          - bash: |
              set -eux  # ensure pipeline stops if terraform fails or diff reports a difference
              terraform show -no-color tfplan > newplan.txt
              diff -u plan.txt newplan.txt
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
            displayName: 'Ensure plan is unchanged'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform apply'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              commandOptions: '-auto-approve tfplan'
              environmentServiceNameAzureRM: '${{ parameters.TerraformEnvironmentServiceConnection }}'
              backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
